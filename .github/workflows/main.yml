name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  KIND_CLUSTER: kind

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run unit tests
        run: pytest tests/

      - name: Lint code with flake8
        run: |
          pip install flake8
          echo '[flake8]' > .flake8
          echo 'max-line-length = 120' >> .flake8
          echo 'extend-ignore = E302, E305, E501, F841, F401, E129, E303, W291, W292, E402' >> .flake8
          echo 'exclude = .venv,venv,__pycache__,.git,.github' >> .flake8
          flake8 .

      - name: Security scan with Bandit
        run: |
          pip install bandit
          bandit -r . --skip B101

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-to-kind:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up KinD
        uses: helm/kind-action@v1.8.0
        with:
          wait: 120s

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Create namespace
        run: kubectl create namespace fastapi || true

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Generate TLS certificate for fastapi.local
        run: |
          mkdir -p certs
          openssl req -x509 -nodes -days 365 \
            -newkey rsa:2048 \
            -keyout certs/tls.key \
            -out certs/tls.crt \
            -subj "/CN=fastapi.local/O=fastapi.local"

          kubectl create secret tls fastapi-tls \
            --cert=certs/tls.crt \
            --key=certs/tls.key \
            -n fastapi
      
      - name: Create DB credentials secret
        run: |
          kubectl create secret generic db-secret \
            --from-literal=username=myuser \
            --from-literal=password=mypassword \
            -n fastapi

      - name: Deploy Redis and PostgreSQL
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

          helm upgrade --install redis bitnami/redis \
              --namespace fastapi --create-namespace \
              --set auth.enabled=false \
              --set fullnameOverride=redis

          helm upgrade --install postgres bitnami/postgresql \
              --namespace fastapi \
              --set auth.username=myuser \
              --set auth.password=mypassword \
              --set auth.database=rickmorty \
              --set fullnameOverride=postgres

      - name: Install Metrics Server for HPA
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl patch deployment metrics-server -n kube-system \
            --type=json -p='[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--kubelet-insecure-tls"}]'
          kubectl rollout status deployment/metrics-server -n kube-system --timeout=90s

      - name: Install ingress-nginx with TLS support
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.publishService.enabled=true \
            --set controller.ingressClassResource.default=true \
            --set controller.extraArgs.default-ssl-certificate=fastapi/fastapi-tls
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=120s

      - name: Label and annotate db-secret for Helm ownership
        run: |
          kubectl label secret db-secret \
            app.kubernetes.io/managed-by=Helm \
            --namespace fastapi --overwrite

          kubectl annotate secret db-secret \
            meta.helm.sh/release-name=fastapi-app \
            meta.helm.sh/release-namespace=fastapi \
            --namespace fastapi --overwrite

      - name: Deploy using Helm
        run: |
          helm upgrade --install fastapi-app ./helm-chart \
            --namespace fastapi \
            --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=latest \
            --set serviceAccount.create=false

      - name: Wait for app to become ready
        run: kubectl wait --namespace fastapi --for=condition=ready pod --selector=app=fastapi-app --timeout=180s

      - name: Verify HPA and metrics API
        run: |
          kubectl get hpa -n fastapi
          kubectl describe hpa fastapi-app -n fastapi
          kubectl top pods -n fastapi || echo "Metrics not ready yet"


      - name: Verify Ingress resource and TLS configuration
        run: |
          echo "🔍 Checking Ingress resource..."
          kubectl get ingress -n fastapi -o yaml | tee ingress-output.yaml
          echo "✅ Should reference 'fastapi.local' and secret 'fastapi-tls'"

      - name: Verify TLS Secret content
        run: |
          echo "🔐 Checking TLS Secret..."
          kubectl get secret fastapi-tls -n fastapi -o yaml
          kubectl get secret fastapi-tls -n fastapi -o jsonpath='{.data.tls\.crt}' | base64 -d | openssl x509 -noout -subject -issuer -dates

      - name: Run integration test
        run: |
          echo "📡 Port-forwarding ingress-nginx-controller..."
          kubectl port-forward --namespace ingress-nginx svc/ingress-nginx-controller 8443:443 > port-forward.log 2>&1 &
          PORT_FORWARD_PID=$!
          sleep 5

          echo "🔍 Verifying TLS certificate served from ingress-nginx..."
          echo | openssl s_client -connect localhost:8443 -servername fastapi.local 2>/dev/null | openssl x509 -noout -subject -issuer -dates

          echo "🩺 Sending request to /healthcheck endpoint..."
          curl -i -k -H "Host: fastapi.local" https://localhost:8443/healthcheck | tee response.log

          echo "🔎 Checking healthcheck response..."
          grep -q '"database":true' response.log && echo "✅ Database connected" || echo "❌ Database connection failed"
          grep -q '"redis":true' response.log && echo "✅ Redis connected" || echo "❌ Redis connection failed"

          echo "🛑 Cleaning up port-forward..."
          kill $PORT_FORWARD_PID || true

